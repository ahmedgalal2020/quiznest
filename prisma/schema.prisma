// prisma/schema.prisma
datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id           Int            @id @default(autoincrement())
  name         String
  email        String         @unique
  password     String
  image        String?
  lastLogin    DateTime?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  role         Role           @default(USER)
  folders      Folder[]
  sets         Set[] // إضافة هذه العلاقة
  stats        UserStats?
  achievements Achievement[]
  attempts     StudyAttempt[]
   flashcardBookmarks   FlashcardBookmark[]
}

model UserStats {
  id            Int       @id @default(autoincrement())
  userId        Int       @unique
  totalSets     Int       @default(0)
  completedSets Int       @default(0)
  totalCards    Int       @default(0)
  masteredCards Int       @default(0)
  studyStreak   Int       @default(0)
  lastStudyDate DateTime?
  xpPoints      Int       @default(0)
  level         Int       @default(1)
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Folder {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  isPublic    Boolean  @default(false)
  icon        String?
  color       String?
  userId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  sets        Set[]
}

model Set {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  isPublic    Boolean        @default(false)
  userId      Int // إضافة هذا الحقل
  folderId    Int?
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  user        User           @relation(fields: [userId], references: [id])
  folder      Folder?        @relation(fields: [folderId], references: [id])
  flashcards  Flashcard[]
  attempts    StudyAttempt[]
  tags        Tag[]          @relation("SetToTag")
}

model Flashcard {
  id         Int        @id @default(autoincrement())
  setId      Int
  question   String     @db.Text
  answer     String     @db.Text
  image      String?
  hint       String?
  notes      String?    @db.Text
  difficulty Int        @default(1)
  lastReview DateTime?
  nextReview DateTime?
  set        Set        @relation(fields: [setId], references: [id])
  responses  Response[]
   flashcardBookmarks   FlashcardBookmark[] 
}


model FlashcardBookmark {
  id          Int        @id @default(autoincrement())
  userId      Int
  flashcardId Int
  createdAt   DateTime   @default(now())

  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  flashcard   Flashcard  @relation(fields: [flashcardId], references: [id], onDelete: Cascade)

  @@unique([userId, flashcardId])
}


model StudyAttempt {
  id          Int        @id @default(autoincrement())
  userId      Int
  setId       Int
  startedAt   DateTime   @default(now())
  completedAt DateTime?
  score       Int        @default(0)
  timeSpent   Int        @default(0) // في الثواني
  user        User       @relation(fields: [userId], references: [id])
  set         Set        @relation(fields: [setId], references: [id])
  responses   Response[]
}

model Response {
  id           Int          @id @default(autoincrement())
  attemptId    Int
  flashcardId  Int
  isCorrect    Boolean
  responseTime Int // في الثواني
  attempt      StudyAttempt @relation(fields: [attemptId], references: [id])
  flashcard    Flashcard    @relation(fields: [flashcardId], references: [id])
}

model Achievement {
  id          Int      @id @default(autoincrement())
  userId      Int
  name        String
  description String
  icon        String
  unlockedAt  DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Tag {
  id   Int    @id @default(autoincrement())
  name String @unique
  sets Set[]  @relation("SetToTag")
}

enum Role {
  USER
  ADMIN
}
